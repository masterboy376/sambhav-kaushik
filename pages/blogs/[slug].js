import React, { useContext } from 'react'
import { Context } from '../../context/context'
import Head from 'next/head'
import Bg from '../../components/Bg'
import Navbar from '../../components/Navbar'
import Link from 'next/link'
import { BsFacebook, BsInstagram, BsTwitter, BsLinkedin, BsGithub } from 'react-icons/bs'
import { IoMdArrowRoundBack } from 'react-icons/io'
import { client } from '../../lib/sanityClient'
import PortableText from "react-portable-text"

const Post = ({ blog }) => {
  const { darkMode, blogRef, router } = useContext(Context)

  const serializers = {
    h1: (props) => <h1 style={{ fontWeight:"700", fontSize:"30px", padding:"5px 0px", lineHeight:"100%" }} {...props} />,
    h2: (props) => <h2 style={{ fontWeight:"600", fontSize:"28px", padding:"5px 0px", lineHeight:"100%" }} {...props} />,
    h3: (props) => <h3 style={{ fontWeight:"500", fontSize:"26px", padding:"5px 0px", lineHeight:"100%" }} {...props} />,
    h4: (props) => <h4 style={{ fontWeight:"500", fontSize:"24px", padding:"5px 0px", lineHeight:"100%" }} {...props} />,
    h5: (props) => <h5 style={{ fontWeight:"500", fontSize:"22px", padding:"5px 0px", lineHeight:"100%" }} {...props} />,
    h6: (props) => <h6 style={{ fontWeight:"500", fontSize:"20px", padding:"5px 0px", lineHeight:"100%" }} {...props} />,
    li: ({ children }) => <li className="special-list-item">{children}</li>,
  }

  return (
    <>
    <style jsx global>{`
        ::-webkit-scrollbar {
          width: 8px;
          background-color: ${darkMode ? 'rgb(17 24 39)' : 'rgb(255 255 255)'};
      }
      ::-webkit-scrollbar-button {
          display: none;
          width: 0;
          height: 0;
      }
      ::-webkit-scrollbar-corner {
          background-color: transparent;
      }
      ::-webkit-scrollbar-thumb {
          background-color: ${darkMode ? 'rgb(75 85 99)' : 'rgb(156 163 175)'};
          border: 2px solid ${darkMode ? 'rgb(75 85 99)' : 'rgb(156 163 175)'};
          border-radius: 10px;
          padding:2px
      }

      .scroll-hidden::-webkit-scrollbar {
        display:none
      }
      html {
        scroll-behavior: smooth;
      }
      `}</style>
    <div>

      <Head>
        <title>sambhav-kaushik | blogs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={`${darkMode ? '/teal.svg' : '/purple.svg'}`} />
      </Head>

      {/* bg */}
      <Bg />

      {/* app  */}
      <div className={`relative z-10 min-h-screen w-full transition-all duration-300 ease-in-out ${darkMode ? 'text-teal-500' : 'text-purple-600'}`}>

        <div className="max-w-7xl w-full mx-auto">

          <Navbar active={'home'} />

          <main className='w-full min-h-screen transition-all duration-300 ease-in-out'>

            <div ref={blogRef} id='blog' className="w-full pt-10 mb-10 overflow-hidden flex flex-col min-h-screen px-10 container mx-auto">

              <h1 className={`sm:text-4xl text-2xl flex items-center ${darkMode ? 'text-white' : 'text-gray-900'} font-bold`}><IoMdArrowRoundBack onClick={()=>{router.push('/blog')}} className={`mr-4 hover:opacity-75 transition-all duration-300`} size={24}/>{blog.title}</h1>
              {/* metadata             */}
              <p className={`${darkMode ? 'text-white' : 'text-gray-900'} my-2 text-sm sm:text-base opacity-70`}>{blog.metaData}</p>
              {/* author */}
              <div className="w-full my-2">
                <div className={`p-4 rounded-2xl ${darkMode ? 'bg-gray-800' : 'bg-gray-100'}`}>

                  <div className={`mb-2 sm:text-base text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    <div className="flex w-full items-center">
                      <img src={blog.authorImg.url} alt="" className={`rounded-full w-12 h-12`} />
                      <span className="ml-4 text-base sm:text-lg font-bold">by {blog.author.name}</span>
                    </div>
                    <div className="sm:text-base text-sm">
                      {blog.author.bio.map((about, index) => {
                        return <p key={index} className='my-1'>{about.children[0].text}</p>
                      })}
                    </div>
                  </div>

                </div>
              </div>

              {/* timestamp */}
              <p className={`mb-2 sm:text-base text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>Published on {new Date(blog._createdAt).toLocaleString('en-US', {
                timeZone: 'IST',
                hour12: true,
                timeStyle: 'short',
                dateStyle: 'long',
              })}</p>
              {/* categories */}
              <p className={`mb-2 sm:text-base text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}><span className='font-bold'>Categories: </span>{blog.categories.map((category, index) => {
                if (index == blog.categories.length - 1) {
                  return ` ${category.title}.`
                }
                else {
                  return ` ${category.title},`
                }
              })}</p>
              {/* main image */}
              <div className="w-full mb-4 p-2">
                <img src={blog.mainImage.url} alt="" className=' h-96 mx-auto rounded' />
              </div>
              {/* content */}
              <div className={`sm:text-base text-sm mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                <PortableText
                  content={blog.body}
                  serializers={serializers}
                />
              </div>
              <hr className={`my-2 mx-auto opacity-70 border ${darkMode ? 'border-white' : 'border-gray-900'} w-64`} />
            </div>


          </main>
        </div>

        {/* footer */}
        <p className="text-center font-bold pb-2">Â© 2022-till now | @SambhavKaushik</p>

      </div>

    </div>
    </>
  )
}

export async function getStaticPaths() {
  let paths
  await client.fetch(`*[_type == "post"]{slug}`).then((allPaths) => {
    paths = allPaths.map((item) => {
      return { params: { slug: item.slug.current } }
    })
  })
  return {
    paths: paths,
    fallback: true
  };
}

export async function getStaticProps(context) {
  let blog
  await client.fetch(`*[_type == "post" && slug.current=="${context.params.slug}"]{ title, slug, author->,'authorImg':author->image.asset->, 'mainImage':mainImage.asset->, categories[]->, body, metaData, _createdAt}`).then((rawBlog) => {
    blog = rawBlog
  })
  return {
    props: { blog: JSON.parse(JSON.stringify(blog))[0] },
  }
}

export default Post